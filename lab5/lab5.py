import math
import statistics

import numpy as np
from scipy import stats

MX1 = 4
alpha = 0.05
MX2 = 5.5
DX1 = 4
DX2 = 7
size1 = 50
size2 = 100
STD1 = math.sqrt(DX1)
STD2 = math.sqrt(DX2)
firstSelection = np.random.normal(MX1, STD1, size=size1)
selection = np.array([5.636839371141405,
4.553091937693756,
2.925527045037262,
3.7267427232394175,
8.363395653745098,
3.6030703823797134,
6.769088673096949,
2.947378948091591,
2.408763107812576,
7.194567256505733,
3.0012339756353428,
3.3895324997607013,
5.059566671774708,
2.8719651906770283,
2.0894153911405873,
3.400226993691673,
4.421235041052796,
3.7675195341735512,
4.498782579643901,
4.41972545065656,
1.695584524930081,
3.9822890694744744,
6.853507241377605,
1.754993516373799,
3.0059428695135244,
2.848372392009337,
3.958147649425551,
4.553510874922257,
4.58238252138234,
5.452133427752064,
3.5715402224357042,
3.9268155334788077,
4.400401048373159,
-0.19976190144459594,
2.782754956404849,
6.091133334321097,
5.723451580563735,
2.16610757604872,
1.2388653131124205,
6.620343231153677,
5.741895735559598,
2.4922806154753716,
6.54683395720698,
-2.308369165969326,
2.157003429019624,
2.7499836192744174,
5.709590902024433,
3.1837818156708497,
1.5681553950933425,
2.1231154104734564
])
# print(firstSelection, sep=',')
# for item in firstSelection:
#     print(f"{item},")
# secondSelection = np.random.normal(MX2, STD2, size=size2)
# print(firstSelection)
# print(secondSelection)


# # проверка первой гипотезы
# print("\n\n1. Гипотеза о числовом значении параметра a(мат. ожидания) при известном параметре сигма^2")
# firstMean = np.mean(firstSelection)
# a = MX1
# U = np.round((firstMean - a) / math.sqrt(DX1 / size1), 3)
# xright = np.round(stats.norm.ppf(1 - alpha / 2, 0, 1), 3)
# xleft = -xright
# if (xleft < U < xright):
#     print("1.1 Двусторонний критерий: Гипотеза принимается, т.к. выполняется неравенство: ", xleft, "<", U, "<", xright)
# else:
#     print("1.1 Двусторонний критерий: Гипотеза отклоняется, т.к. не выполняется неравенство: ", xleft, "<", U, "<",
#           xright)
# # Правостронний критерий
# xright1 = np.round(stats.norm.ppf(1 - alpha, 0, 1), 3)
# if (U < xright1):
#     print("1.2 Правосторонний критерий (a>a0): Гипотеза принимается, т.к. выполняется неравенство: ", U, "<", xright1)
# else:
#     print("1.2 Правосторонний критерий (a>a0): Гипотеза отклоняется, т.к. не выполняется неравенство: ", U, "<",
#           xright1)
# # Левосторонний критерий
# xleft1 = -np.round(stats.norm.ppf(1 - alpha, 0, 1), 3)
# if (U > xleft1):
#     print("1.3 Левосторонний критерий (a<a0): Гипотеза принимается, т.к. выполняется неравенство: ", U, ">", xleft1)
# else:
#     print("1.2 Правосторонний критерий (a<a0): Гипотеза отклоняется, т.к. не выполняется неравенство: ", U, ">",
#           xleft1)

#
# # проверка второй гипотезы
# print("\n\n2. Гипотеза о числовом значении параметра a(мат. ожидания) при неизвестном параметре сигма^2")
# Sx = statistics.stdev(firstSelection)  # выборочное ско
# T = np.round((firstMean - a) / math.sqrt(Sx / size1), 3)
# xright = np.round(stats.t.ppf(1 - alpha / 2, size1 - 1), 3)
# xleft = -xright
# if (xleft < T < xright):
#     print("2.1 Двусторонний критерий: Гипотеза принимается, т.к. выполняется неравенство: ", xleft, "<", T, "<", xright)
# else:
#     print("2.1 Двусторонний критерий: Гипотеза отклоняется, т.к. не выполняется неравенство: ", xleft, "<", T, "<",
#           xright)
# # Правостронний критерий
# xright2 = np.round(stats.t.ppf(1 - alpha, size1 - 1), 3)
# if (T < xright2):
#     print("2.2 Правосторонний критерий (a > a0): Гипотеза принимается, т.к. выполняется неравенство: ", T, "<", xright2)
# else:
#     print("2.2 Правосторонний критерий (a > a0): Гипотеза отклоняется, т.к. не выполняется неравенство: ", T, "<",
#           xright2)
# # Левосторонний критерий
# xleft2 = -np.round(stats.t.ppf(1 - alpha, size1 - 1), 3)
# if (T > xleft2):
#     print("2.3 Левосторонний критерий (a < a0): Гипотеза принимается, т.к. выполняется неравенство: ", T, ">", xleft2)
# else:
#     print("2.3 Левосторонний критерий (a < a0): Гипотеза отклоняется, т.к. не выполняется неравенство: ", T, ">",
#           xleft2)
#
#
#
# # проверка 3-й гипотезы
# print("\n\n3. Гипотеза о числовом значении сигма^2(дисперсии) при неизвестном параметре a")
# X = np.round((Sx ** (2)* (size1 - 1)) / (DX1), 3)
# xright = np.round(stats.chi2.ppf(1 - alpha / 2, size1 - 1), 3)
# xleft = np.round(stats.chi2.ppf(alpha / 2, size1 - 1), 3)
# if xleft < X < xright:
#     print("3.1 Двусторонний критерий: Гипотеза принимается, т.к. выполняется неравенство: ", xleft, "<", X, "<", xright)
# else:
#     print("3.1 Двусторонний критерий: Гипотеза отклоняется, т.к. не выполняется неравенство: ", xleft, "<", X, "<",
#           xright)
# # Правостронний критерий
# xright3 = np.round(stats.chi2.ppf(1 - alpha, size1 - 1), 3)
# if (X < xright3):
#     print("3.2 Правосторонний критерий (сигма^2 > сигма0^2): Гипотеза принимается, т.к. выполняется неравенство: ", X, "<", xright3)
# else:
#     print("3.2 Правосторонний критерий (сигма^2 > сигма0^2): Гипотеза отклоняется, т.к. не выполняется неравенство: ",
#           X, "<", xright3)
# # Левосторонний критерий
# xleft3 = np.round(stats.chi2.ppf(alpha, size1 - 1), 3)
# if (X > xleft3):
#     print("3.3 Левосторонний критерий (сигма^2 < сигма0^2) : Гипотеза принимается, т.к. выполняется неравенство: ", X, ">", xleft3)
# else:
#     print("3.3 Левосторонний критерий (сигма^2 < сигма0^2) : Гипотеза отклоняется, т.к. не выполняется неравенство: ",
#           X, ">", xleft3)
#
# # проверка 4-й гипотезы
# print("\n\n4. Гипотеза о равенстве мат. ожиданий 2-x выборок, если обе дисперсии известны")
# secondMean = np.mean(secondSelection)
# U = np.round((firstMean - secondMean) / math.sqrt((DX1 / size1) + (DX2 / size2)), 3)
# xright = np.round(stats.norm.ppf(1 - alpha / 2, 0,1), 3)
# xleft = -xright
# if (xleft < U < xright):
#     print("4.1 Двусторонний критерий: Гипотеза принимается, т.к. выполняется неравенство: ", xleft, "<", U, "<", xright)
# else:
#     print("4.1 Двусторонний критерий: Гипотеза отклоняется, т.к. не выполняется неравенство: ", xleft, "<", U, "<",
#           xright)
# # Правостронний критерий
# xright4 = np.round(stats.norm.ppf(1 - alpha, 0, 1), 3)
# if (U < xright4):
#     print("4.2 Правосторонний критерий (ax > ay) : Гипотеза принимается, т.к. выполняется неравенство: ", U, "<", xright4)
# else:
#     print("4.2 Правосторонний критерий (ax > ay) : Гипотеза отклоняется, т.к. не выполняется неравенство: ", U, "<",
#           xright4)
# # Левосторонний критерий
# xleft4 = -xright4
# if (U > xleft4):
#     print("4.3 Левосторонний критерий (ax < ay): Гипотеза принимается, т.к. выполняется неравенство: ", U, ">", xleft4)
# else:
#     print("4.3 Левосторонний критерий (ax < ay): Гипотеза отклоняется, т.к. не выполняется неравенство: ", U, ">",
#           xleft4)
#
#
# # проверка 5-й гипотезы
# print("\n\n5. Гипотеза о равенстве мат. ожиданий 2-x выборок, если обе дисперсии неизвестны, но равны")
# Sy = statistics.stdev(secondSelection)
# T = np.round((firstMean - secondMean) / math.sqrt((1/size1+1/size2)*((size1-1)*Sx**2+(size2-1)*Sy**2)/(size1+size2-2)), 3)
# xright = np.round(stats.t.ppf(1 - alpha / 2, size1 +size2- 2), 3)
# xleft = -xright
# if (xleft < T < xright):
#     print("5.1 Двусторонний критерий: Гипотеза принимается, т.к. выполняется неравенство: ", xleft, "<", T, "<", xright)
# else:
#     print("5.1 Двусторонний критерий: Гипотеза отклоняется, т.к. не выполняется неравенство: ", xleft, "<", T, "<",
#           xright)
# # Правостронний критерий
# xright5 = np.round(stats.t.ppf(1 - alpha, size1+size2-2), 3)
# if (U < xright5):
#     print("5.2 Правосторонний критерий (ax > ay) : Гипотеза принимается, т.к. выполняется неравенство: ", T, "<", xright5)
# else:
#     print("5.2 Правосторонний критерий (ax > ay) : Гипотеза отклоняется, т.к. не выполняется неравенство: ", T, "<",
#           xright5)
# # Левосторонний критерий
# xleft5 = -xright5
# if (U > xleft5):
#     print("5.3 Левосторонний критерий (ax < ay): Гипотеза принимается, т.к. выполняется неравенство: ", T, ">", xleft5)
# else:
#     print("5.3 Левосторонний критерий (ax < ay): Гипотеза отклоняется, т.к. не выполняется неравенство: ", T, ">",
#           xleft5)
#
#
#
# # проверка 6-й гипотезы
# print("\n\n6. Гипотеза о равенстве дисперсий 2-x выборок, если мат. ожидания неизвестны")
# if Sx>Sy:
#     F = np.round((Sy*Sy/(Sx*Sx)), 3)
# else:
#     F = np.round((Sx * Sx / (Sy * Sy)), 3)
# xright = np.round(stats.f.ppf(1 - alpha / 2, size1-1,size2- 1), 3)
# xleft = np.round(stats.f.ppf(alpha / 2, size1-1,size2- 1), 3)
# if (xleft < F < xright):
#     print("6.1 Двусторонний критерий: Гипотеза принимается, т.к. выполняется неравенство: ", xleft, "<", F, "<", xright)
# else:
#     print("6.1 Двусторонний критерий: Гипотеза отклоняется, т.к. не выполняется неравенство: ", xleft, "<", F, "<",
#           xright)
# # Односторонний критерий
# xright6 = np.round(stats.f.ppf(1 - alpha, size1-1, size2-1), 3)
# if (U < xright6):
#     print("6.2 Односторонний критерий (сигмаy^2 > сигмаx^2) : Гипотеза принимается, т.к. выполняется неравенство: ", F, "<", xright6)
# else:
#     print("6.2 Односторонний критерий (сигмаy^2 > сигмаx^2) : Гипотеза отклоняется, т.к. не выполняется неравенство: ",
#           F, "<", xright6)

# проверка первой гипотезы
print("\n\n1. Гипотеза о числовом значении параметра a(мат. ожидания) при известном параметре сигма^2")
Mean = np.mean(selection)
a = MX1
U = np.round((Mean - a) / math.sqrt(DX1 / size1), 3)
xright = np.round(stats.norm.ppf(1 - alpha / 2, 0, 1), 3)
xleft = -xright
if (xleft < U < xright):
    print("1.1 Двусторонний критерий: Гипотеза принимается, т.к. выполняется неравенство: ", xleft, "<", U, "<", xright)
else:
    print("1.1 Двусторонний критерий: Гипотеза отклоняется, т.к. не выполняется неравенство: ", xleft, "<", U, "<",
          xright)
# Правостронний критерий
xright1 = np.round(stats.norm.ppf(1 - alpha, 0, 1), 3)
if (U < xright1):
    print("1.2 Правосторонний критерий (a>a0): Гипотеза принимается, т.к. выполняется неравенство: ", U, "<", xright1)
else:
    print("1.2 Правосторонний критерий (a>a0): Гипотеза отклоняется, т.к. не выполняется неравенство: ", U, "<",
          xright1)
# Левосторонний критерий
xleft1 = -np.round(stats.norm.ppf(1 - alpha, 0, 1), 3)
if (U > xleft1):
    print("1.3 Левосторонний критерий (a<a0): Гипотеза принимается, т.к. выполняется неравенство: ", U, ">", xleft1)
else:
    print("1.2 Правосторонний критерий (a<a0): Гипотеза отклоняется, т.к. не выполняется неравенство: ", U, ">",
          xleft1)
